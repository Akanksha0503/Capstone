{"name": "test_login_ddt[firefox-case1]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Reached error page: about:neterror?e=dnsNotFound&u=https%3A//admin-demo.nopcommerce.com/login%3FReturnUrl%3D%252Fadmin%252F&c=UTF-8&d=We%20can%E2%80%99t%20connect%20to%20the%20server%20at%20admin-demo.nopcommerce.com.\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:202:5\nUnknownError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:961:5\ncheckReadyState@chrome://remote/content/marionette/navigate.sys.mjs:59:24\nonNavigation@chrome://remote/content/marionette/navigate.sys.mjs:348:39\nemit@resource://gre/modules/EventEmitter.sys.mjs:156:19\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteEventsParent.sys.mjs:33:25", "trace": "self = <Selenium_Ecommerce.tests.test_login.TestLoginLogout object at 0x000001583E3D8C00>, case = {'email': 'invalid@invalid.com', 'expected': 'Fail', 'password': 'wrong'}\nsetup = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"1883e8fe-6093-4292-be3d-3737eae0c9d9\")>\n\n    @pytest.mark.parametrize(\"case\", load_test_data(\"Selenium_Ecommerce/utils/data/login_data.xml\"))\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.loginnop\n    @allure.story(\"Data Driven Login Test with Allure & Screenshots\")\n    def test_login_ddt(self, case, setup):\n        \"\"\"\n        Attempts to log in with each dataset entry.\n        Supports multiple browsers and data formats.\n        \"\"\"\n        # Extract fields from dataset\n        email, password, expected = case[\"email\"], case[\"password\"], case[\"expected\"]\n    \n        driver = setup\n        login_page = LoginPage(driver)\n>       driver.get(\"https://admin-demo.nopcommerce.com/login?ReturnUrl=%2Fadmin%2F\")\n\nSelenium_Ecommerce\\tests\\test_login.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:483: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001583E8F10F0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"Reached error page: about:neterror?e=dnsNotFoun....sys.mjs:156:19\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteEventsParent.sys.mjs:33:25\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Reached error page: about:neterror?e=dnsNotFound&u=https%3A//admin-demo.nopcommerce.com/login%3FReturnUrl%3D%252Fadmin%252F&c=UTF-8&d=We%20can%E2%80%99t%20connect%20to%20the%20server%20at%20admin-demo.nopcommerce.com.\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:202:5\nE       UnknownError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:961:5\nE       checkReadyState@chrome://remote/content/marionette/navigate.sys.mjs:59:24\nE       onNavigation@chrome://remote/content/marionette/navigate.sys.mjs:348:39\nE       emit@resource://gre/modules/EventEmitter.sys.mjs:156:19\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteEventsParent.sys.mjs:33:25\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "description": "\nAttempts to log in with each dataset entry.\nSupports multiple browsers and data formats.\n", "parameters": [{"name": "setup", "value": "'firefox'"}, {"name": "case", "value": "{'email': 'invalid@invalid.com', 'password': 'wrong', 'expected': 'Fail'}"}], "start": 1760720500522, "stop": 1760720511749, "uuid": "104668a0-c314-4415-8e38-4b19d040b2be", "historyId": "c6146220a347d956e3ed8bc722948b74", "testCaseId": "1f17878d8de39a9bdfe8a6cf6dd9e4b4", "fullName": "tests.test_login.TestLoginLogout#test_login_ddt", "labels": [{"name": "feature", "value": "Login Module"}, {"name": "severity", "value": "critical"}, {"name": "story", "value": "Data Driven Login Test with Allure & Screenshots"}, {"name": "tag", "value": "loginnop"}, {"name": "tag", "value": "login"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLoginLogout"}, {"name": "host", "value": "ASCENDI-FJC3FA0"}, {"name": "thread", "value": "21792-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}], "titlePath": ["tests", "test_login.py", "TestLoginLogout"]}