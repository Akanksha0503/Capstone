{"uid":"ce87ef150f6fe726","name":"test_open_orders_module[chrome]","fullName":"tests.test_keyword.TestKeywords#test_open_orders_module","historyId":"272d70fdd62d7346b5ef00142f2fc133","time":{"start":1761139813852,"stop":1761139826827,"duration":12975},"description":"Verify navigation to Orders page.","descriptionHtml":"<p>Verify navigation to Orders page.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=141.0.7390.108); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementnotinteractableexception\nStacktrace:\n\tGetHandleVerifier [0x0x45fe43+66515]\n\tGetHandleVerifier [0x0x45fe84+66580]\n\t(No symbol) [0x0x24da6b]\n\t(No symbol) [0x0x29990d]\n\t(No symbol) [0x0x28e115]\n\t(No symbol) [0x0x2bb1cc]\n\t(No symbol) [0x0x28db74]\n\t(No symbol) [0x0x2bb384]\n\t(No symbol) [0x0x2dcba7]\n\t(No symbol) [0x0x2bafc6]\n\t(No symbol) [0x0x28c2ca]\n\t(No symbol) [0x0x28d154]\n\tGetHandleVerifier [0x0x6b7353+2521315]\n\tGetHandleVerifier [0x0x6b22d3+2500707]\n\tGetHandleVerifier [0x0x487c94+229924]\n\tGetHandleVerifier [0x0x4781f8+165768]\n\tGetHandleVerifier [0x0x47ecad+193085]\n\tGetHandleVerifier [0x0x468158+100072]\n\tGetHandleVerifier [0x0x4682f0+100480]\n\tGetHandleVerifier [0x0x4525aa+11066]\n\tBaseThreadInitThunk [0x0x751c5d49+25]\n\tRtlInitializeExceptionChain [0x0x7700d6db+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7700d661+561]","statusTrace":"self = <Selenium_Ecommerce.tests.test_keyword.TestKeywords object at 0x0000020EB0D756A0>\n\n    def test_open_orders_module(self):\n        \"\"\"Verify navigation to Orders page.\"\"\"\n        self.kw.navigate_to_url(Config.BASE_URL)\n        self.kw.login(Config.ADMIN_USERNAME, Config.ADMIN_PASSWORD)\n>       assert self.kw.open_orders_page() is True\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSelenium_Ecommerce\\tests\\test_keyword.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nSelenium_Ecommerce\\pages\\Keyword.py:73: in open_orders_page\n    self.click_element(By.XPATH, \"//p[normalize-space()='Sales']\")\nSelenium_Ecommerce\\pages\\Keyword.py:26: in click_element\n    self.driver.find_element(by, locator).click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020EB1227F70>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x7700d6db+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7700d661+561]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=141.0.7390.108); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementnotinteractableexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x45fe43+66515]\nE       \tGetHandleVerifier [0x0x45fe84+66580]\nE       \t(No symbol) [0x0x24da6b]\nE       \t(No symbol) [0x0x29990d]\nE       \t(No symbol) [0x0x28e115]\nE       \t(No symbol) [0x0x2bb1cc]\nE       \t(No symbol) [0x0x28db74]\nE       \t(No symbol) [0x0x2bb384]\nE       \t(No symbol) [0x0x2dcba7]\nE       \t(No symbol) [0x0x2bafc6]\nE       \t(No symbol) [0x0x28c2ca]\nE       \t(No symbol) [0x0x28d154]\nE       \tGetHandleVerifier [0x0x6b7353+2521315]\nE       \tGetHandleVerifier [0x0x6b22d3+2500707]\nE       \tGetHandleVerifier [0x0x487c94+229924]\nE       \tGetHandleVerifier [0x0x4781f8+165768]\nE       \tGetHandleVerifier [0x0x47ecad+193085]\nE       \tGetHandleVerifier [0x0x468158+100072]\nE       \tGetHandleVerifier [0x0x4682f0+100480]\nE       \tGetHandleVerifier [0x0x4525aa+11066]\nE       \tBaseThreadInitThunk [0x0x751c5d49+25]\nE       \tRtlInitializeExceptionChain [0x0x7700d6db+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7700d661+561]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1761139808553,"stop":1761139813851,"duration":5298},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false},{"name":"setup","time":{"start":1761139978633,"stop":1761139990004,"duration":11371},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false}],"testStage":{"description":"Verify navigation to Orders page.","status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=141.0.7390.108); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementnotinteractableexception\nStacktrace:\n\tGetHandleVerifier [0x0x45fe43+66515]\n\tGetHandleVerifier [0x0x45fe84+66580]\n\t(No symbol) [0x0x24da6b]\n\t(No symbol) [0x0x29990d]\n\t(No symbol) [0x0x28e115]\n\t(No symbol) [0x0x2bb1cc]\n\t(No symbol) [0x0x28db74]\n\t(No symbol) [0x0x2bb384]\n\t(No symbol) [0x0x2dcba7]\n\t(No symbol) [0x0x2bafc6]\n\t(No symbol) [0x0x28c2ca]\n\t(No symbol) [0x0x28d154]\n\tGetHandleVerifier [0x0x6b7353+2521315]\n\tGetHandleVerifier [0x0x6b22d3+2500707]\n\tGetHandleVerifier [0x0x487c94+229924]\n\tGetHandleVerifier [0x0x4781f8+165768]\n\tGetHandleVerifier [0x0x47ecad+193085]\n\tGetHandleVerifier [0x0x468158+100072]\n\tGetHandleVerifier [0x0x4682f0+100480]\n\tGetHandleVerifier [0x0x4525aa+11066]\n\tBaseThreadInitThunk [0x0x751c5d49+25]\n\tRtlInitializeExceptionChain [0x0x7700d6db+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7700d661+561]","statusTrace":"self = <Selenium_Ecommerce.tests.test_keyword.TestKeywords object at 0x0000020EB0D756A0>\n\n    def test_open_orders_module(self):\n        \"\"\"Verify navigation to Orders page.\"\"\"\n        self.kw.navigate_to_url(Config.BASE_URL)\n        self.kw.login(Config.ADMIN_USERNAME, Config.ADMIN_PASSWORD)\n>       assert self.kw.open_orders_page() is True\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSelenium_Ecommerce\\tests\\test_keyword.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nSelenium_Ecommerce\\pages\\Keyword.py:73: in open_orders_page\n    self.click_element(By.XPATH, \"//p[normalize-space()='Sales']\")\nSelenium_Ecommerce\\pages\\Keyword.py:26: in click_element\n    self.driver.find_element(by, locator).click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020EB1227F70>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x7700d6db+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7700d661+561]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=141.0.7390.108); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementnotinteractableexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x45fe43+66515]\nE       \tGetHandleVerifier [0x0x45fe84+66580]\nE       \t(No symbol) [0x0x24da6b]\nE       \t(No symbol) [0x0x29990d]\nE       \t(No symbol) [0x0x28e115]\nE       \t(No symbol) [0x0x2bb1cc]\nE       \t(No symbol) [0x0x28db74]\nE       \t(No symbol) [0x0x2bb384]\nE       \t(No symbol) [0x0x2dcba7]\nE       \t(No symbol) [0x0x2bafc6]\nE       \t(No symbol) [0x0x28c2ca]\nE       \t(No symbol) [0x0x28d154]\nE       \tGetHandleVerifier [0x0x6b7353+2521315]\nE       \tGetHandleVerifier [0x0x6b22d3+2500707]\nE       \tGetHandleVerifier [0x0x487c94+229924]\nE       \tGetHandleVerifier [0x0x4781f8+165768]\nE       \tGetHandleVerifier [0x0x47ecad+193085]\nE       \tGetHandleVerifier [0x0x468158+100072]\nE       \tGetHandleVerifier [0x0x4682f0+100480]\nE       \tGetHandleVerifier [0x0x4525aa+11066]\nE       \tBaseThreadInitThunk [0x0x751c5d49+25]\nE       \tRtlInitializeExceptionChain [0x0x7700d6db+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7700d661+561]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException","steps":[],"attachments":[{"uid":"2f993930c4295a31","name":"log","source":"2f993930c4295a31.txt","type":"text/plain","size":397}],"parameters":[],"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":0,"attachmentStep":false},"afterStages":[{"name":"setup::0","time":{"start":1761139826969,"stop":1761139829191,"duration":2222},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false},{"name":"setup::0","time":{"start":1761140022338,"stop":1761140026138,"duration":3800},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_keyword"},{"name":"subSuite","value":"TestKeywords"},{"name":"host","value":"ASCENDI-FJC3FA0"},{"name":"thread","value":"6440-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_keyword"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"setup","value":"'chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"ce87ef150f6fe726.json","parameterValues":["'chrome'"]}